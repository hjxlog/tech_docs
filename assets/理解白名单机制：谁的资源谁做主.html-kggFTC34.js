import{_ as s,c as a,a as t,o as e}from"./app-KBoto0Ig.js";const p={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="理解白名单机制-谁的资源谁做主" tabindex="-1"><a class="header-anchor" href="#理解白名单机制-谁的资源谁做主"><span>理解白名单机制：谁的资源谁做主</span></a></h1><p>在开发或部署服务的过程中，我们经常会遇到“白名单”这个概念。它既常见又容易混淆，特别是在涉及<strong>服务访问控制</strong>的时候。今天这篇文章就来聊聊：</p><ul><li>什么是白名单？</li><li>白名单到底是控制谁访问谁？</li><li>我们在什么场景下需要设置白名单？</li><li>实战中该怎么做？</li></ul><hr><h2 id="一、什么是白名单" tabindex="-1"><a class="header-anchor" href="#一、什么是白名单"><span>一、什么是白名单？</span></a></h2><p>白名单是一种安全机制，它的本质是：<strong>只允许在名单上的 IP、域名或服务访问特定资源，其他的一律拒绝</strong>。</p><p>相比之下，黑名单是指“除了黑名单里不能访问的，其他都可以”。</p><p>所以白名单的控制是“<strong>默认拒绝，明确放行</strong>”，更加安全、常用于高敏感资源。</p><hr><h2 id="二、谁的资源谁做主" tabindex="-1"><a class="header-anchor" href="#二、谁的资源谁做主"><span>二、谁的资源谁做主</span></a></h2><p>我们经常会问：“我需要给谁开白名单？”或者“是不是对方要给我开白名单？”</p><p>其实，有个通用的理解框架可以帮你快速判断：</p><blockquote><p><strong>谁的资源，谁是主动控制方；谁想访问，谁是被动申请方。</strong></p></blockquote><p>也就是说：</p><ul><li><strong>你提供服务或资源</strong>，你就要设置白名单，决定谁能访问。</li><li><strong>你想访问别人的服务</strong>，就需要对方把你加入白名单。</li></ul><h3 id="✅-举几个例子" tabindex="-1"><a class="header-anchor" href="#✅-举几个例子"><span>✅ 举几个例子：</span></a></h3><table><thead><tr><th>场景</th><th>谁提供资源</th><th>谁设置白名单</th><th>谁是主动方</th></tr></thead><tbody><tr><td>第三方访问你部署的 API</td><td>你</td><td>你设置白名单</td><td>你决定谁能访问</td></tr><tr><td>你调用微信支付 API</td><td>微信</td><td>微信设置白名单</td><td>微信决定你是否能调用</td></tr><tr><td>你访问阿里云的数据库服务</td><td>阿里云</td><td>阿里云设置白名单</td><td>阿里云决定是否放行你的 IP</td></tr></tbody></table><hr><h2 id="三、你的服务要允许第三方访问-怎么办" tabindex="-1"><a class="header-anchor" href="#三、你的服务要允许第三方访问-怎么办"><span>三、你的服务要允许第三方访问，怎么办？</span></a></h2><p>比如你部署了一个 Webhook 接口，要让第三方系统（如支付平台、回调通知服务）访问。</p><h3 id="步骤如下" tabindex="-1"><a class="header-anchor" href="#步骤如下"><span>步骤如下：</span></a></h3><ol><li><strong>确认你服务的地址是否对外可访问</strong>： <ul><li>有公网 IP 或域名；</li><li>云服务器安全组或防火墙已开放目标端口（如 80、443、8080）。</li></ul></li><li><strong>设置白名单（推荐）</strong>： <ul><li>在云平台（如阿里云、腾讯云）控制台添加入站规则，只允许第三方的出口 IP；</li><li>或者在你的服务代码中添加 IP 白名单过滤逻辑，阻止非法访问。</li></ul></li><li><strong>告知第三方你的服务地址，并获取他们的出口 IP</strong>。</li><li><strong>测试联通性，确认访问正常。</strong></li></ol><hr><h2 id="四、白名单和认证机制可以并存" tabindex="-1"><a class="header-anchor" href="#四、白名单和认证机制可以并存"><span>四、白名单和认证机制可以并存</span></a></h2><p>白名单主要控制访问来源，而认证机制（如 token、签名）则控制访问身份。最佳实践是<strong>两者同时使用</strong>，做到“来源可信 + 身份可信”。</p><hr><h2 id="五、spring-boot-示例-基于-ip-的白名单过滤器" tabindex="-1"><a class="header-anchor" href="#五、spring-boot-示例-基于-ip-的白名单过滤器"><span>五、Spring Boot 示例：基于 IP 的白名单过滤器</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpWhitelistFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">ALLOWED_IPS</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;1.2.3.4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5.6.7.8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">ALLOWED_IPS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_FORBIDDEN</span><span class="token punctuation">,</span> <span class="token string">&quot;Forbidden IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、小结" tabindex="-1"><a class="header-anchor" href="#六、小结"><span>六、小结</span></a></h2><ul><li>白名单控制的是<strong>谁可以访问服务</strong>。</li><li><strong>谁提供服务，谁就控制白名单，谁就是主动方</strong>。</li><li>实际开发中，你既可能是“资源提供者”，也可能是“访问者”。</li><li>无论哪种情况，理解清楚这个机制都能让你避免掉很多沟通和配置上的坑。</li></ul>`,31)]))}const c=s(p,[["render",l],["__file","理解白名单机制：谁的资源谁做主.html.vue"]]),r=JSON.parse('{"path":"/Network/%E7%90%86%E8%A7%A3%E7%99%BD%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6%EF%BC%9A%E8%B0%81%E7%9A%84%E8%B5%84%E6%BA%90%E8%B0%81%E5%81%9A%E4%B8%BB.html","title":"理解白名单机制：谁的资源谁做主","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、什么是白名单？","slug":"一、什么是白名单","link":"#一、什么是白名单","children":[]},{"level":2,"title":"二、谁的资源谁做主","slug":"二、谁的资源谁做主","link":"#二、谁的资源谁做主","children":[{"level":3,"title":"✅ 举几个例子：","slug":"✅-举几个例子","link":"#✅-举几个例子","children":[]}]},{"level":2,"title":"三、你的服务要允许第三方访问，怎么办？","slug":"三、你的服务要允许第三方访问-怎么办","link":"#三、你的服务要允许第三方访问-怎么办","children":[{"level":3,"title":"步骤如下：","slug":"步骤如下","link":"#步骤如下","children":[]}]},{"level":2,"title":"四、白名单和认证机制可以并存","slug":"四、白名单和认证机制可以并存","link":"#四、白名单和认证机制可以并存","children":[]},{"level":2,"title":"五、Spring Boot 示例：基于 IP 的白名单过滤器","slug":"五、spring-boot-示例-基于-ip-的白名单过滤器","link":"#五、spring-boot-示例-基于-ip-的白名单过滤器","children":[]},{"level":2,"title":"六、小结","slug":"六、小结","link":"#六、小结","children":[]}],"git":{"updatedTime":1749518371000,"contributors":[{"name":"JX","username":"JX","email":"hjxlog@gmail.com","commits":1,"url":"https://github.com/JX"}],"changelog":[{"hash":"a66b4a1c0d974d7b1651b25b9472fadc83eb6d62","time":1749518371000,"email":"hjxlog@gmail.com","author":"JX","message":"docs(Network): 添加白名单机制解释文章"}]},"filePathRelative":"Network/理解白名单机制：谁的资源谁做主.md"}');export{c as comp,r as data};
