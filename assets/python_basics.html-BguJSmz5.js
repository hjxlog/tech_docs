import{_ as s,c as a,a as p,o as e}from"./app-Ch7rFS6K.js";const t={};function l(i,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>版本：python3，注意，python3并没有考虑向下兼容。</p><h2 id="python-简介" tabindex="-1"><a class="header-anchor" href="#python-简介"><span>Python 简介</span></a></h2><p><strong>Python</strong> 是一种高级、解释型、通用的编程语言，由 <strong>Guido van Rossum</strong> 于 1991 年首次发布。Python 的设计哲学强调代码的可读性和简洁性，使用缩进来定义代码块，而不是像其他语言那样使用大括号。Python 支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。</p><p>Python 的特点</p><ol><li><strong>简单易学</strong>：语法简洁明了，适合初学者。</li><li><strong>跨平台</strong>：支持 Windows、macOS、Linux 等多种操作系统。</li><li><strong>丰富的库和框架</strong>：拥有庞大的标准库和第三方库，适用于 Web 开发、数据分析、人工智能、科学计算等领域。</li><li><strong>解释型语言</strong>：无需编译，直接运行代码。</li><li><strong>动态类型</strong>：变量类型在运行时确定，无需显式声明。</li><li><strong>社区支持</strong>：拥有庞大的开发者社区，资源丰富。</li></ol><h2 id="windows-下安装-python" tabindex="-1"><a class="header-anchor" href="#windows-下安装-python"><span>Windows 下安装 Python</span></a></h2><p>官网下载：https://www.python.org/downloads/，注意添加到环境变量中。</p><p>查看python版本：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">python <span class="token operator">-</span><span class="token operator">-</span>version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="解释器" tabindex="-1"><a class="header-anchor" href="#解释器"><span>解释器</span></a></h2><p>Python 解释器是一个程序，负责读取、解析和执行 Python 代码。它是 Python 语言的核心组件，将 Python 代码转换为计算机能够理解和执行的指令。Python 解释器的主要作用是实现 Python 的动态性和跨平台特性。</p><ul><li>Python 解释器是 Python 代码执行的核心组件，负责将代码转换为计算机能够执行的指令。</li><li>解释器的工作过程包括词法分析、语法分析、编译和执行。</li><li>Python 的动态性、跨平台特性和易用性都依赖于解释器的实现。</li><li>常见的解释器实现包括 CPython、Jython、IronPython、PyPy 和 MicroPython。</li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h2><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h3><p>在 Python 里，标识符由字母、数字、下划线组成，但是不能以数字开头（比如：解释器将无法区分 <code>123</code> 是数字字面量还是变量名）。</p><p>标识符中的下划线有一些特殊的意义，如下：</p><ul><li><code>_variable</code>：约定俗成的私有变量或模块级别的私有成员。</li><li><code>variable_</code>：避免与关键字冲突。</li><li><code>__variable</code>：名称改写，提供一定程度的“私有”保护。</li><li><code>__variable__</code>：特殊方法，用于操作符重载或其他特殊行为。</li><li><code>_</code>：临时变量或忽略变量。</li></ul><h3 id="行和缩进" tabindex="-1"><a class="header-anchor" href="#行和缩进"><span>行和缩进</span></a></h3><p>在Python中，<strong>行与缩进</strong>是语法的重要组成部分，用于定义代码块的结构。与其他语言（如C、Java）使用大括号 <code>{}</code> 不同，Python通过缩进来表示代码块的层次关系。</p><p><strong>行的基本规则</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 一行一条语句：通常，Python代码每行只写一条语句。</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多行语句：如果一条语句过长，可以用反斜杠 \\ 换行。</span></span>
<span class="line">total <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> \\</span>
<span class="line">        <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多行语句：或者使用括号 ()、[]、{} 来隐式换行。</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span></span>
<span class="line">       <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缩进规则</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 缩进定义代码块：Python使用缩进来表示代码块的层次关系，通常用 4个空格 作为标准缩进（也可以用Tab，但推荐使用空格）。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;x is positive&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 属于if代码块</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is indented&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 属于if代码块</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is not indented&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 不属于if代码块</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 缩进必须一致：同一代码块的缩进必须相同，否则会引发 IndentationError。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;x is positive&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This will cause an error&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 缩进不一致，报错</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多级缩进：嵌套代码块需要多级缩进。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Both x and y are positive&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is still in the outer if block&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 单行注释采用 # 开头。</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 这里也可以注释</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多行注释使用三个单引号 &#39;&#39;&#39; 或三个双引号 &quot;&quot;&quot;。</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">这是多行注释，使用单引号。</span>
<span class="line">这是多行注释，使用单引号。</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">这是多行注释，使用双引号。</span>
<span class="line">这是多行注释，使用双引号。</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>变量是用来存储数据的容器。你可以把变量想象成一个标签，这个标签指向内存中的某个值。Python 是动态类型语言，不需要显式声明变量的类型。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">x <span class="token operator">=</span> <span class="token number">10</span>          <span class="token comment"># 整数</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token number">3.14</span>        <span class="token comment"># 浮点数</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>  <span class="token comment"># 字符串</span></span>
<span class="line">is_student <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 布尔值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><p>字符串是 Python 中最常用的数据类型。我们可以使用引号 ( <strong>&#39;</strong> 或 <strong>&quot;</strong> ) 来创建字符串。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">s1 <span class="token operator">=</span> <span class="token string">&#39;这是一个字符串&#39;</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&quot;这也是一个字符串&quot;</span></span>
<span class="line">s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;这是一个</span>
<span class="line">多行字符串&#39;&#39;&#39;</span></span>
<span class="line">s4 <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;这也是一个</span>
<span class="line">多行字符串&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li><strong>不可变性</strong>：字符串一旦创建，就不能修改其中的字符。如果需要修改，只能创建一个新的字符串。</li><li><strong>有序性</strong>：字符串中的字符是有顺序的，可以通过索引访问每个字符。</li><li><strong>支持多种操作</strong>：比如拼接、切片、查找、替换等。</li></ul><p><strong>基本操作：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 访问字符</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: H</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: e</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串拼接</span></span>
<span class="line">s1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span></span>
<span class="line">s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s2</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello World</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串长度</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串切片</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: World</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串查找</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Python&quot;</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>  <span class="token comment"># 输出: False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串替换</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line">new_s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello, Python!</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串格式化</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;My name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> years old.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: My name is Alice and I am 25 years old.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 还有很多，转换大小写，取出前后空格，拆分，拼接，判断开头结尾等</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;函数说明&quot;&quot;&quot;</span></span>
<span class="line">    function_content</span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用"><span>函数调用</span></a></h3><div class="language-pyth line-numbers-mode" data-highlighter="prismjs" data-ext="pyth"><pre><code><span class="line">def print_num(a):</span>
<span class="line">    print(f&quot;入参数字是：{a}&quot;)</span>
<span class="line"></span>
<span class="line"># 函数调用</span>
<span class="line">print_num(10)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h3><p>重点要区分可变对象：<code>string, tuple, number</code>和不可变对象：<code>list, dict</code>。</p><ul><li>不可变对象：<code>string, tuple, number</code>，传递的是对象的副本，函数内部对参数的修改不会影响原始对象。</li><li>可变对象：<code>list, dict</code>，传递的是对象的引用，函数内部对参数的修改会影响原始对象。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">modify_number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 传递的是 x 的副本，函数内部对 num 的修改不会影响外部的 x。</span></span>
<span class="line">    num <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数内部:&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 函数内部: 15</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">modify_number<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数外部:&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 函数外部: 5</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">modify_list</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 传递的是 my_list 的引用。函数内部对 lst 的修改会直接影响外部的 my_list。</span></span>
<span class="line">    lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数内部:&quot;</span><span class="token punctuation">,</span> lst<span class="token punctuation">)</span>  <span class="token comment"># 函数内部: [1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">modify_list<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数外部:&quot;</span><span class="token punctuation">,</span> my_list<span class="token punctuation">)</span>  <span class="token comment"># 函数外部: [1, 2, 3, 4]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数类型" tabindex="-1"><a class="header-anchor" href="#参数类型"><span>参数类型</span></a></h3><ol><li><strong>必备参数</strong>：按顺序传递，数量必须匹配。</li><li><strong>关键字参数</strong>：通过 <code>参数名=值</code> 传递，顺序可任意。</li><li><strong>默认参数</strong>：定义时指定默认值，调用时可省略。</li><li><strong>可变长度参数</strong>：<code>*args</code> 接收任意位置参数，<code>**kwargs</code> 接收任意关键字参数。</li><li><strong>仅关键字参数</strong>：在 <code>*</code> 或 <code>*args</code> 后，必须通过关键字传递。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 必备参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;必备参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 必备参数: a=1, b=2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;关键字参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func2<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 关键字参数: a=1, b=2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 默认参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;默认参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 默认参数: a=1, b=10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 可变长度参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;可变长度参数: args=</span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">, kwargs=</span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment"># 输出: 可变长度参数: args=(1, 2, 3), kwargs={&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 20}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 仅关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func5</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;仅关键字参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func5<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 仅关键字参数: a=1, b=2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><p>使用 lambda 来创建匿名函数。适合简单、临时的操作。语法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">lambda</span> 参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> 表达式</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 示例</span></span>
<span class="line">add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53)]))}const c=s(t,[["render",l],["__file","python_basics.html.vue"]]),u=JSON.parse('{"path":"/Python/python_basics.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python 简介","slug":"python-简介","link":"#python-简介","children":[]},{"level":2,"title":"Windows 下安装 Python","slug":"windows-下安装-python","link":"#windows-下安装-python","children":[]},{"level":2,"title":"解释器","slug":"解释器","link":"#解释器","children":[]},{"level":2,"title":"基础语法","slug":"基础语法","link":"#基础语法","children":[{"level":3,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":3,"title":"行和缩进","slug":"行和缩进","link":"#行和缩进","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"定义函数","slug":"定义函数","link":"#定义函数","children":[]},{"level":3,"title":"函数调用","slug":"函数调用","link":"#函数调用","children":[]},{"level":3,"title":"参数传递","slug":"参数传递","link":"#参数传递","children":[]},{"level":3,"title":"参数类型","slug":"参数类型","link":"#参数类型","children":[]},{"level":3,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]}]}],"git":{"updatedTime":1742302299000,"contributors":[{"name":"HuangJX","username":"HuangJX","email":"hjxlog@gmail.com","commits":4,"url":"https://github.com/HuangJX"}],"changelog":[{"hash":"abdbd676f5d7cb304a5b359ede841ee9d4fc8a9e","time":1742302299000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"336b13d3707fa7ee466f18820bf0b51b69f623c7","time":1742189185000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"0d94334b6f6f23439e05d830bcaa4516c42d4bc0","time":1742110479000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"ebc1f0c6d0703aa11bcc9360ae54ce42de028752","time":1742093790000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"}]},"filePathRelative":"Python/python_basics.md"}');export{c as comp,u as data};
