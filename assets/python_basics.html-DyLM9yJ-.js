import{_ as s,c as a,a as p,o as t}from"./app-KBoto0Ig.js";const e={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<p>版本：python3，注意，python3并没有考虑向下兼容。</p><h2 id="python-简介" tabindex="-1"><a class="header-anchor" href="#python-简介"><span>Python 简介</span></a></h2><p><strong>Python</strong> 是一种高级、解释型、通用的编程语言，由 <strong>Guido van Rossum</strong> 于 1991 年首次发布。Python 的设计哲学强调代码的可读性和简洁性，使用缩进来定义代码块，而不是像其他语言那样使用大括号。Python 支持多种编程范式，包括面向对象、命令式、函数式和过程式编程。</p><p>Python 的特点</p><ol><li><strong>简单易学</strong>：语法简洁明了，适合初学者。</li><li><strong>跨平台</strong>：支持 Windows、macOS、Linux 等多种操作系统。</li><li><strong>丰富的库和框架</strong>：拥有庞大的标准库和第三方库，适用于 Web 开发、数据分析、人工智能、科学计算等领域。</li><li><strong>解释型语言</strong>：无需编译，直接运行代码。</li><li><strong>动态类型</strong>：变量类型在运行时确定，无需显式声明。</li><li><strong>社区支持</strong>：拥有庞大的开发者社区，资源丰富。</li></ol><h2 id="windows-下安装-python" tabindex="-1"><a class="header-anchor" href="#windows-下安装-python"><span>Windows 下安装 Python</span></a></h2><p>官网下载：https://www.python.org/downloads/，注意添加到环境变量中。</p><p>查看python版本：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">python <span class="token operator">-</span><span class="token operator">-</span>version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="解释器" tabindex="-1"><a class="header-anchor" href="#解释器"><span>解释器</span></a></h2><p>Python 解释器是一个程序，负责读取、解析和执行 Python 代码。它是 Python 语言的核心组件，将 Python 代码转换为计算机能够理解和执行的指令。Python 解释器的主要作用是实现 Python 的动态性和跨平台特性。</p><ul><li>Python 解释器是 Python 代码执行的核心组件，负责将代码转换为计算机能够执行的指令。</li><li>解释器的工作过程包括词法分析、语法分析、编译和执行。</li><li>Python 的动态性、跨平台特性和易用性都依赖于解释器的实现。</li><li>常见的解释器实现包括 CPython、Jython、IronPython、PyPy 和 MicroPython。</li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h2><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h3><p>在 Python 里，标识符由字母、数字、下划线组成，但是不能以数字开头（比如：解释器将无法区分 <code>123</code> 是数字字面量还是变量名）。</p><p>标识符中的下划线有一些特殊的意义，如下：</p><ul><li><code>_variable</code>：约定俗成的私有变量或模块级别的私有成员。</li><li><code>variable_</code>：避免与关键字冲突。</li><li><code>__variable</code>：名称改写，提供一定程度的“私有”保护。</li><li><code>__variable__</code>：特殊方法，用于操作符重载或其他特殊行为。</li><li><code>_</code>：临时变量或忽略变量。</li></ul><h3 id="行和缩进" tabindex="-1"><a class="header-anchor" href="#行和缩进"><span>行和缩进</span></a></h3><p>在Python中，<strong>行与缩进</strong>是语法的重要组成部分，用于定义代码块的结构。与其他语言（如C、Java）使用大括号 <code>{}</code> 不同，Python通过缩进来表示代码块的层次关系。</p><p><strong>行的基本规则</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 一行一条语句：通常，Python代码每行只写一条语句。</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多行语句：如果一条语句过长，可以用反斜杠 \\ 换行。</span></span>
<span class="line">total <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> \\</span>
<span class="line">        <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多行语句：或者使用括号 ()、[]、{} 来隐式换行。</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span></span>
<span class="line">       <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缩进规则</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 缩进定义代码块：Python使用缩进来表示代码块的层次关系，通常用 4个空格 作为标准缩进（也可以用Tab，但推荐使用空格）。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;x is positive&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 属于if代码块</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is indented&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 属于if代码块</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is not indented&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 不属于if代码块</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 缩进必须一致：同一代码块的缩进必须相同，否则会引发 IndentationError。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;x is positive&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This will cause an error&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 缩进不一致，报错</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多级缩进：嵌套代码块需要多级缩进。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Both x and y are positive&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is still in the outer if block&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 单行注释采用 # 开头。</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 这里也可以注释</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 多行注释使用三个单引号 &#39;&#39;&#39; 或三个双引号 &quot;&quot;&quot;。</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">这是多行注释，使用单引号。</span>
<span class="line">这是多行注释，使用单引号。</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">这是多行注释，使用双引号。</span>
<span class="line">这是多行注释，使用双引号。</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>变量是用来存储数据的容器。你可以把变量想象成一个标签，这个标签指向内存中的某个值。Python 是动态类型语言，不需要显式声明变量的类型。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">x <span class="token operator">=</span> <span class="token number">10</span>          <span class="token comment"># 整数</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token number">3.14</span>        <span class="token comment"># 浮点数</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>  <span class="token comment"># 字符串</span></span>
<span class="line">is_student <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 布尔值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><p>字符串是 Python 中最常用的数据类型。我们可以使用引号 ( <strong>&#39;</strong> 或 <strong>&quot;</strong> ) 来创建字符串。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">s1 <span class="token operator">=</span> <span class="token string">&#39;这是一个字符串&#39;</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&quot;这也是一个字符串&quot;</span></span>
<span class="line">s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;这是一个</span>
<span class="line">多行字符串&#39;&#39;&#39;</span></span>
<span class="line">s4 <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;这也是一个</span>
<span class="line">多行字符串&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特点：</strong></p><ul><li><strong>不可变性</strong>：字符串一旦创建，就不能修改其中的字符。如果需要修改，只能创建一个新的字符串。</li><li><strong>有序性</strong>：字符串中的字符是有顺序的，可以通过索引访问每个字符。</li><li><strong>支持多种操作</strong>：比如拼接、切片、查找、替换等。</li></ul><p><strong>基本操作：</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 访问字符</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: H</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: e</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串拼接</span></span>
<span class="line">s1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span></span>
<span class="line">s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s2</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello World</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串长度</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串切片</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: World</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串查找</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Python&quot;</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>  <span class="token comment"># 输出: False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串替换</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line">new_s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_s<span class="token punctuation">)</span>  <span class="token comment"># 输出: Hello, Python!</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串格式化</span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span></span>
<span class="line">age <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;My name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> years old.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: My name is Alice and I am 25 years old.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 还有很多，转换大小写，取出前后空格，拆分，拼接，判断开头结尾等</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h3><ul><li>整数（<code>int</code>）：如 <code>10</code>, <code>-5</code>, <code>0</code>。</li><li>浮点数（<code>float</code>）：如 <code>3.14</code>, <code>-0.001</code>, <code>2.0</code>。</li><li>复数（<code>complex</code>）：如 <code>2 + 3j</code>, <code>1 - 4j</code>。</li><li>布尔值（<code>bool</code>）：如 <code>True</code>, <code>False</code>（本质是 <code>1</code> 和 <code>0</code>）。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 数字类型</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token number">10</span>          <span class="token comment"># 整数</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">3.14</span>        <span class="token comment"># 浮点数</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3j</span>      <span class="token comment"># 复数</span></span>
<span class="line">d <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># 布尔值</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;a = </span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, 类型是 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># a = 10, 类型是 &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;b = </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">, 类型是 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># b = 3.14, 类型是 &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;c = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">, 类型是 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># c = (2+3j), 类型是 &lt;class &#39;complex&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;d = </span><span class="token interpolation"><span class="token punctuation">{</span>d<span class="token punctuation">}</span></span><span class="token string">, 类型是 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># d = True, 类型是 &lt;class &#39;bool&#39;&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 类型转换</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>       <span class="token comment"># 浮点数转整数</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment"># 整数转浮点数</span></span>
<span class="line">z <span class="token operator">=</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment"># 整数转复数</span></span>
<span class="line">w <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment"># 整数转布尔值</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;x = </span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">, y = </span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">, z = </span><span class="token interpolation"><span class="token punctuation">{</span>z<span class="token punctuation">}</span></span><span class="token string">, w = </span><span class="token interpolation"><span class="token punctuation">{</span>w<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># x = 3, y = 10.0, z = (2+0j), w = False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 数学运算</span></span>
<span class="line">sum_result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">5</span>         <span class="token comment"># 加法</span></span>
<span class="line">diff_result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span>        <span class="token comment"># 减法</span></span>
<span class="line">prod_result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">5</span>        <span class="token comment"># 乘法</span></span>
<span class="line">quot_result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">5</span>        <span class="token comment"># 除法</span></span>
<span class="line">mod_result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span>         <span class="token comment"># 取余</span></span>
<span class="line">power_result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span>       <span class="token comment"># 幂运算</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;sum = </span><span class="token interpolation"><span class="token punctuation">{</span>sum_result<span class="token punctuation">}</span></span><span class="token string">, diff = </span><span class="token interpolation"><span class="token punctuation">{</span>diff_result<span class="token punctuation">}</span></span><span class="token string">, prod = </span><span class="token interpolation"><span class="token punctuation">{</span>prod_result<span class="token punctuation">}</span></span><span class="token string">, quot = </span><span class="token interpolation"><span class="token punctuation">{</span>quot_result<span class="token punctuation">}</span></span><span class="token string">, mod = </span><span class="token interpolation"><span class="token punctuation">{</span>mod_result<span class="token punctuation">}</span></span><span class="token string">, power = </span><span class="token interpolation"><span class="token punctuation">{</span>power_result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出：sum = 15, diff = 5, prod = 50, quot = 2.0, mod = 1, power = 8</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 数学函数</span></span>
<span class="line"><span class="token keyword">import</span> math</span>
<span class="line">sqrt_value <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>          <span class="token comment"># 平方根</span></span>
<span class="line">sin_value <span class="token operator">=</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 正弦函数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;sqrt(16) = </span><span class="token interpolation"><span class="token punctuation">{</span>sqrt_value<span class="token punctuation">}</span></span><span class="token string">, sin(pi/2) = </span><span class="token interpolation"><span class="token punctuation">{</span>sin_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># sqrt(16) = 4.0, sin(pi/2) = 1.0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 随机数</span></span>
<span class="line"><span class="token keyword">import</span> random</span>
<span class="line">random_number <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 生成 1 到 100 的随机整数</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;随机数: </span><span class="token interpolation"><span class="token punctuation">{</span>random_number<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 格式化输出</span></span>
<span class="line">pi <span class="token operator">=</span> <span class="token number">3.14159</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Pi 的值是 </span><span class="token interpolation"><span class="token punctuation">{</span>pi<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># Pi 的值是 3.14</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 比较运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h3><p>列表是一个有序、可变的集合，用方括号 <code>[]</code> 表示，元素之间用逗号分隔，可以包含任意类型的元素（数字、字符串、列表等）。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 列表的定义</span></span>
<span class="line">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>  <span class="token comment"># 包含多种类型的元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;my_list: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: my_list: [1, 2, 3, &#39;Python&#39;, 3.14, True]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 访问元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第一个元素: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 第一个元素: 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;最后一个元素: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 最后一个元素: True</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 修改元素</span></span>
<span class="line">my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 修改第二个元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;修改后的列表: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 修改后的列表: [1, 20, 3, &#39;Python&#39;, 3.14, True]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 添加元素</span></span>
<span class="line">my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;New Item&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 在末尾添加元素</span></span>
<span class="line">my_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Inserted Item&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 在索引 2 处插入元素</span></span>
<span class="line">my_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 扩展列表</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;添加元素后的列表: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 添加元素后的列表: [1, 20, &#39;Inserted Item&#39;, 3, &#39;Python&#39;, 3.14, True, &#39;New Item&#39;, 10, 20, 30]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 删除元素</span></span>
<span class="line">my_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;Inserted Item&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 删除指定元素</span></span>
<span class="line">popped_item <span class="token operator">=</span> my_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 删除并返回索引 2 的元素</span></span>
<span class="line"><span class="token keyword">del</span> my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 删除索引 0 的元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;删除元素后的列表: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">}</span></span><span class="token string">, 被删除的元素: </span><span class="token interpolation"><span class="token punctuation">{</span>popped_item<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 删除元素后的列表: [20, 3, &#39;Python&#39;, 3.14, True, &#39;New Item&#39;, 10, 20, 30], 被删除的元素: 3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 切片操作</span></span>
<span class="line">sub_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment"># 获取索引 1 到 4 的子列表</span></span>
<span class="line">step_list <span class="token operator">=</span> my_list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 每隔一个元素取一个</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;子列表: </span><span class="token interpolation"><span class="token punctuation">{</span>sub_list<span class="token punctuation">}</span></span><span class="token string">, 步长列表: </span><span class="token interpolation"><span class="token punctuation">{</span>step_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 子列表: [3, &#39;Python&#39;, 3.14, True], 步长列表: [20, &#39;Python&#39;, True, 10, 30]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 常用方法</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;列表长度: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 列表长度: 9</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&#39;Python&#39; 的索引: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: &#39;Python&#39; 的索引: 2</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;20 出现的次数: </span><span class="token interpolation"><span class="token punctuation">{</span>my_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 20 出现的次数: 2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 8. 排序和反转</span></span>
<span class="line">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>
<span class="line">num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 排序</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;排序后的列表: </span><span class="token interpolation"><span class="token punctuation">{</span>num_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 排序后的列表: [1, 1, 2, 3, 4, 5, 6, 9]</span></span>
<span class="line">num_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 反转</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;反转后的列表: </span><span class="token interpolation"><span class="token punctuation">{</span>num_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 反转后的列表: [9, 6, 5, 4, 3, 2, 1, 1]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 9. 遍历列表</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;遍历列表:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> item <span class="token keyword">in</span> my_list<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 20 3 Python 3.14 True New Item 10 20 30</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 10. 列表的嵌套</span></span>
<span class="line">nested_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;嵌套列表: </span><span class="token interpolation"><span class="token punctuation">{</span>nested_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 嵌套列表: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;嵌套列表的第一个元素: </span><span class="token interpolation"><span class="token punctuation">{</span>nested_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 嵌套列表的第一个元素: [1, 2, 3]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 11. 列表的复制</span></span>
<span class="line"><span class="token keyword">import</span> copy</span>
<span class="line">shallow_copy <span class="token operator">=</span> my_list<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 浅拷贝</span></span>
<span class="line">deep_copy <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 深拷贝</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;浅拷贝: </span><span class="token interpolation"><span class="token punctuation">{</span>shallow_copy<span class="token punctuation">}</span></span><span class="token string">, 深拷贝: </span><span class="token interpolation"><span class="token punctuation">{</span>deep_copy<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组"><span>元组</span></a></h3><p>元组是一个有序、不可变的集合，用圆括号 <code>()</code> 表示，元素之间用逗号分隔，同样可以包含任意类型的元素（数字、字符串、列表等）。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 元组的定义</span></span>
<span class="line">my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 包含多种类型的元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;my_tuple: </span><span class="token interpolation"><span class="token punctuation">{</span>my_tuple<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: my_tuple: (1, 2, 3, &#39;Python&#39;, 3.14, True)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 访问元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;第一个元素: </span><span class="token interpolation"><span class="token punctuation">{</span>my_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 第一个元素: 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;最后一个元素: </span><span class="token interpolation"><span class="token punctuation">{</span>my_tuple<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 最后一个元素: True</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 切片操作</span></span>
<span class="line">sub_tuple <span class="token operator">=</span> my_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># 获取索引 1 到 3 的子元组</span></span>
<span class="line">step_tuple <span class="token operator">=</span> my_tuple<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 每隔一个元素取一个</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;子元组: </span><span class="token interpolation"><span class="token punctuation">{</span>sub_tuple<span class="token punctuation">}</span></span><span class="token string">, 步长元组: </span><span class="token interpolation"><span class="token punctuation">{</span>step_tuple<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 子元组: (2, 3, &#39;Python&#39;), 步长元组: (1, 3, 3.14)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 元组的拼接</span></span>
<span class="line">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span></span>
<span class="line">combined_tuple <span class="token operator">=</span> tuple1 <span class="token operator">+</span> tuple2  <span class="token comment"># 拼接两个元组</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;拼接后的元组: </span><span class="token interpolation"><span class="token punctuation">{</span>combined_tuple<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 拼接后的元组: (1, 2, 3, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 元组的重复</span></span>
<span class="line">repeated_tuple <span class="token operator">=</span> tuple1 <span class="token operator">*</span> <span class="token number">3</span>  <span class="token comment"># 重复元组</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;重复后的元组: </span><span class="token interpolation"><span class="token punctuation">{</span>repeated_tuple<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 重复后的元组: (1, 2, 3, 1, 2, 3, 1, 2, 3)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 常用方法</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;元组长度: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 元组长度: 6</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&#39;Python&#39; 的索引: </span><span class="token interpolation"><span class="token punctuation">{</span>my_tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: &#39;Python&#39; 的索引: 3</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;3 出现的次数: </span><span class="token interpolation"><span class="token punctuation">{</span>my_tuple<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 3 出现的次数: 1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 遍历元组</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;遍历元组:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> item <span class="token keyword">in</span> my_tuple<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 1 2 3 Python 3.14 True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 8. 元组的嵌套</span></span>
<span class="line">nested_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;嵌套元组: </span><span class="token interpolation"><span class="token punctuation">{</span>nested_tuple<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 嵌套元组: ((1, 2, 3), (4, 5, 6), (7, 8, 9))</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;嵌套元组的第一个元素: </span><span class="token interpolation"><span class="token punctuation">{</span>nested_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 嵌套元组的第一个元素: (1, 2, 3)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 9. 元组的不可变性</span></span>
<span class="line"><span class="token comment"># my_tuple[0] = 10  # 会报错，元组不可修改</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 10. 元组的解包</span></span>
<span class="line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f <span class="token operator">=</span> my_tuple  <span class="token comment"># 解包元组</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;解包后的变量: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">, c=</span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">, d=</span><span class="token interpolation"><span class="token punctuation">{</span>d<span class="token punctuation">}</span></span><span class="token string">, e=</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">, f=</span><span class="token interpolation"><span class="token punctuation">{</span>f<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 解包后的变量: a=1, b=2, c=3, d=Python, e=3.14, f=True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典" tabindex="-1"><a class="header-anchor" href="#字典"><span>字典</span></a></h3><p><strong>定义：</strong></p><ul><li>字典是一个无序、可变的键值对集合，用花括号 <code>{}</code> 表示，键值对之间用逗号分隔。</li><li>键必须是不可变类型（如字符串、数字、元组），值可以是任意类型。</li><li>字典的键是唯一的，值可以重复。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 字典的定义</span></span>
<span class="line">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;is_student&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;courses&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Physics&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;address&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;zipcode&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;100000&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;my_dict: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: my_dict: {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 25, &#39;is_student&#39;: False, &#39;courses&#39;: [&#39;Math&#39;, &#39;Physics&#39;], &#39;address&#39;: {&#39;city&#39;: &#39;Beijing&#39;, &#39;zipcode&#39;: &#39;100000&#39;}}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 访问元素</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;姓名: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 姓名: Alice</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;城市: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">[</span><span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 城市: Beijing</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 添加/修改元素</span></span>
<span class="line">my_dict<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">26</span>  <span class="token comment"># 修改年龄</span></span>
<span class="line">my_dict<span class="token punctuation">[</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Female&quot;</span>  <span class="token comment"># 添加性别</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;修改后的字典: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 修改后的字典: {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 26, &#39;is_student&#39;: False, &#39;courses&#39;: [&#39;Math&#39;, &#39;Physics&#39;], &#39;address&#39;: {&#39;city&#39;: &#39;Beijing&#39;, &#39;zipcode&#39;: &#39;100000&#39;}, &#39;gender&#39;: &#39;Female&#39;}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 删除元素</span></span>
<span class="line"><span class="token keyword">del</span> my_dict<span class="token punctuation">[</span><span class="token string">&quot;is_student&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># 删除键值对</span></span>
<span class="line">popped_value <span class="token operator">=</span> my_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 删除并返回键对应的值</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;删除后的字典: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">}</span></span><span class="token string">, 被删除的值: </span><span class="token interpolation"><span class="token punctuation">{</span>popped_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 删除后的字典: {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 26, &#39;courses&#39;: [&#39;Math&#39;, &#39;Physics&#39;], &#39;address&#39;: {&#39;city&#39;: &#39;Beijing&#39;, &#39;zipcode&#39;: &#39;100000&#39;}}, 被删除的值: Female</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 检查键是否存在</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token string">&quot;age&quot;</span> <span class="token keyword">in</span> my_dict<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;age 键存在&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: age 键存在</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 常用方法</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;所有键: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 所有键: dict_keys([&#39;name&#39;, &#39;age&#39;, &#39;courses&#39;, &#39;address&#39;])</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;所有值: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 所有值: dict_values([&#39;Alice&#39;, 26, [&#39;Math&#39;, &#39;Physics&#39;], {&#39;city&#39;: &#39;Beijing&#39;, &#39;zipcode&#39;: &#39;100000&#39;}])</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;所有键值对: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 所有键值对: dict_items([(&#39;name&#39;, &#39;Alice&#39;), (&#39;age&#39;, 26), (&#39;courses&#39;, [&#39;Math&#39;, &#39;Physics&#39;]), (&#39;address&#39;, {&#39;city&#39;: &#39;Beijing&#39;, &#39;zipcode&#39;: &#39;100000&#39;})])</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 安全获取值</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;获取不存在的键: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;默认值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 获取不存在的键: 默认值</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 8. 合并字典</span></span>
<span class="line">new_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;height&quot;</span><span class="token punctuation">:</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token string">&quot;weight&quot;</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">}</span></span>
<span class="line">my_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>  <span class="token comment"># 合并字典</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;合并后的字典: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 合并后的字典: {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 26, &#39;courses&#39;: [&#39;Math&#39;, &#39;Physics&#39;], &#39;address&#39;: {&#39;city&#39;: &#39;Beijing&#39;, &#39;zipcode&#39;: &#39;100000&#39;}, &#39;height&#39;: 170, &#39;weight&#39;: 60}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 9. 清空字典</span></span>
<span class="line">my_dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;清空后的字典: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 清空后的字典: {}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 10. 遍历字典</span></span>
<span class="line">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;遍历字典:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> my_dict<span class="token punctuation">:</span>  <span class="token comment"># 遍历键</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;键: </span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">, 值: </span><span class="token interpolation"><span class="token punctuation">{</span>my_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出:</span></span>
<span class="line"><span class="token comment"># 键: name, 值: Alice</span></span>
<span class="line"><span class="token comment"># 键: age, 值: 25</span></span>
<span class="line"><span class="token comment"># 键: city, 值: Beijing</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历键值对</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;键值对: </span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出:</span></span>
<span class="line"><span class="token comment"># 键值对: name -&gt; Alice</span></span>
<span class="line"><span class="token comment"># 键值对: age -&gt; 25</span></span>
<span class="line"><span class="token comment"># 键值对: city -&gt; Beijing</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 11. 字典的嵌套</span></span>
<span class="line">nested_dict <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;person1&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;person2&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;嵌套字典: </span><span class="token interpolation"><span class="token punctuation">{</span>nested_dict<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 输出: 嵌套字典: {&#39;person1&#39;: {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 25}, &#39;person2&#39;: {&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 30}}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 12. 字典的复制</span></span>
<span class="line"><span class="token keyword">import</span> copy</span>
<span class="line">shallow_copy <span class="token operator">=</span> my_dict<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 浅拷贝</span></span>
<span class="line">deep_copy <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>  <span class="token comment"># 深拷贝</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;浅拷贝: </span><span class="token interpolation"><span class="token punctuation">{</span>shallow_copy<span class="token punctuation">}</span></span><span class="token string">, 深拷贝: </span><span class="token interpolation"><span class="token punctuation">{</span>deep_copy<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件" tabindex="-1"><a class="header-anchor" href="#条件"><span>条件</span></a></h2><p>由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 基本的 if 语句</span></span>
<span class="line"><span class="token comment"># if 用于判断一个条件是否为真，如果为真则执行对应的代码块</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1. 基本的 if 语句: x 大于 5&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为真，执行此代码块</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. if-else 语句</span></span>
<span class="line"><span class="token comment"># else 用于在 if 条件为假时执行另一个代码块</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token keyword">if</span> y <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;2. if-else 语句: y 大于 5&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为假，跳过此代码块</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;2. if-else 语句: y 不大于 5&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为假，执行此代码块</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. if-elif-else 语句</span></span>
<span class="line"><span class="token comment"># elif 用于检查多个条件，类似于 else if</span></span>
<span class="line">z <span class="token operator">=</span> <span class="token number">7</span></span>
<span class="line"><span class="token keyword">if</span> z <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;3. if-elif-else 语句: z 大于 10&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为假，跳过此代码块</span></span>
<span class="line"><span class="token keyword">elif</span> z <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;3. if-elif-else 语句: z 大于 5 但小于等于 10&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为真，执行此代码块</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;3. if-elif-else 语句: z 小于等于 5&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为假，跳过此代码块</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 嵌套的 if 语句</span></span>
<span class="line"><span class="token comment"># if 语句可以嵌套在另一个 if 语句中，用于处理更复杂的条件</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line"><span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;4. 嵌套的 if 语句: a 大于 10 且是偶数&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 外层和内层条件均为真，执行此代码块</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;4. 嵌套的 if 语句: a 大于 10 且是奇数&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 外层条件为真，内层条件为假时执行</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;4. 嵌套的 if 语句: a 小于等于 10&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 外层条件为假时执行</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 简化的 if 语句（三元运算符）</span></span>
<span class="line"><span class="token comment"># 三元运算符用于简化简单的 if-else 语句，适合单行表达式</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">8</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token string">&quot;5. 三元运算符: b 大于 5&quot;</span> <span class="token keyword">if</span> b <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">&quot;5. 三元运算符: b 不大于 5&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 条件为真，输出 &quot;b 大于 5&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 空代码块（pass 语句）</span></span>
<span class="line"><span class="token comment"># 如果某个条件不需要执行任何操作，可以使用 pass 语句占位</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"><span class="token keyword">if</span> c <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span>  <span class="token comment"># 条件为假，不执行任何操作</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;6. pass 语句: c 不大于 5&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 条件为假，执行此代码块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 遍历列表</span></span>
<span class="line"><span class="token comment"># for 循环可以遍历列表中的每个元素</span></span>
<span class="line">fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>  <span class="token comment"># 输出: apple, banana, cherry</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 遍历字符串</span></span>
<span class="line"><span class="token comment"># for 循环可以遍历字符串中的每个字符</span></span>
<span class="line">word <span class="token operator">=</span> <span class="token string">&quot;Python&quot;</span></span>
<span class="line"><span class="token keyword">for</span> char <span class="token keyword">in</span> word<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token comment"># 输出: P, y, t, h, o, n</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 遍历字典的键</span></span>
<span class="line"><span class="token comment"># for 循环可以遍历字典的键</span></span>
<span class="line">my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> my_dict<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment"># 输出: name, age, city</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 遍历字典的值</span></span>
<span class="line"><span class="token comment"># for 循环可以遍历字典的值</span></span>
<span class="line"><span class="token keyword">for</span> value <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 输出: Alice, 25, New York</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 遍历字典的键值对</span></span>
<span class="line"><span class="token comment"># for 循环可以遍历字典的键值对</span></span>
<span class="line"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> my_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: name: Alice, age: 25, city: New York</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 使用 range() 函数</span></span>
<span class="line"><span class="token comment"># range() 生成一个数字序列，常用于控制循环次数</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment"># 输出: 0, 1, 2, 3, 4</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 嵌套 for 循环</span></span>
<span class="line"><span class="token comment"># for 循环可以嵌套，用于处理多维数据结构</span></span>
<span class="line">matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> num <span class="token keyword">in</span> row<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 1 2 3 4 5 6 7 8 9</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 换行</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 8. 使用 enumerate() 获取索引和值</span></span>
<span class="line"><span class="token comment"># enumerate() 返回索引和对应的值</span></span>
<span class="line"><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;索引: </span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">, 值: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 索引: 0, 值: apple, 索引: 1, 值: banana, 索引: 2, 值: cherry</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 9. 使用 zip() 遍历多个序列</span></span>
<span class="line"><span class="token comment"># zip() 将多个序列组合成一个可迭代对象</span></span>
<span class="line">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">]</span></span>
<span class="line">ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> 的年龄是 </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出: Alice 的年龄是 25, Bob 的年龄是 30, Charlie 的年龄是 35</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 10. 列表推导式</span></span>
<span class="line"><span class="token comment"># 列表推导式是一种简洁的创建列表的方式，基于 for 循环</span></span>
<span class="line">squares <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span>  <span class="token comment"># 输出: [0, 1, 4, 9, 16]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 11. 带条件的列表推导式</span></span>
<span class="line"><span class="token comment"># 可以在列表推导式中添加条件</span></span>
<span class="line">even_squares <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>even_squares<span class="token punctuation">)</span>  <span class="token comment"># 输出: [0, 4, 16, 36, 64]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 12. 遍历文件内容</span></span>
<span class="line"><span class="token comment"># for 循环可以逐行遍历文件内容</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出文件每一行的内容（去除换行符）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 13. 遍历生成器</span></span>
<span class="line"><span class="token comment"># 生成器是一种惰性计算的迭代器，for 循环可以遍历生成器</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token number">2</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> value <span class="token keyword">in</span> my_generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 输出: 1, 2, 3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 14. 使用 else 子句</span></span>
<span class="line"><span class="token comment"># for 循环可以带有 else 子句，当循环正常结束时执行</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;循环正常结束&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 0, 1, 2, 循环正常结束</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 15. 使用 break 和 continue</span></span>
<span class="line"><span class="token comment"># break 用于提前退出循环，continue 用于跳过当前迭代</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span>  <span class="token comment"># 当 i 等于 3 时退出循环</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment"># 输出: 0, 1, 2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">continue</span>  <span class="token comment"># 当 i 等于 3 时跳过当前迭代</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment"># 输出: 0, 1, 2, 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 基本的 while 循环</span></span>
<span class="line"><span class="token comment"># while 循环在条件为真时重复执行代码块</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1. 当前计数:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 输出: 当前计数: 0, 1, 2, 3, 4</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 使用 break 退出循环</span></span>
<span class="line"><span class="token comment"># break 用于提前退出 while 循环</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span>  <span class="token comment"># 当 count 大于等于 5 时退出循环</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;2. 当前计数:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 输出: 当前计数: 0, 1, 2, 3, 4</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 使用 continue 跳过当前迭代</span></span>
<span class="line"><span class="token comment"># continue 用于跳过当前迭代，直接进入下一次循环</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">continue</span>  <span class="token comment"># 当 count 等于 3 时跳过当前迭代</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;3. 当前计数:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>  <span class="token comment"># 输出: 当前计数: 1, 2, 4, 5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 使用 else 子句</span></span>
<span class="line"><span class="token comment"># while 循环可以带有 else 子句，当循环正常结束时执行</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;4. 当前计数:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;4. 循环正常结束&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 当前计数: 0, 1, 2, 循环正常结束</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 无限循环</span></span>
<span class="line"><span class="token comment"># 如果条件永远为真，while 循环会无限执行</span></span>
<span class="line"><span class="token comment"># 以下代码被注释掉，避免无限循环</span></span>
<span class="line"><span class="token comment"># while True:</span></span>
<span class="line"><span class="token comment">#     print(&quot;5. 这是一个无限循环&quot;)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 用户输入控制循环</span></span>
<span class="line"><span class="token comment"># 使用用户输入来控制 while 循环的执行</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;6. 请输入 &#39;exit&#39; 退出循环: &quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> user_input <span class="token operator">==</span> <span class="token string">&quot;exit&quot;</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;6. 你输入了:&quot;</span><span class="token punctuation">,</span> user_input<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 嵌套 while 循环</span></span>
<span class="line"><span class="token comment"># while 循环可以嵌套，用于处理复杂逻辑</span></span>
<span class="line">i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    j <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;7. i=</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">, j=</span><span class="token interpolation"><span class="token punctuation">{</span>j<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        j <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 输出: i=1, j=1; i=1, j=2; i=1, j=3; i=2, j=1; ...</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 8. 使用标志变量控制循环</span></span>
<span class="line"><span class="token comment"># 使用标志变量来控制 while 循环的执行</span></span>
<span class="line">flag <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> flag<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;8. 当前计数:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 当 count 大于等于 3 时退出循环</span></span>
<span class="line">    <span class="token comment"># 输出: 当前计数: 0, 1, 2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 9. 遍历列表直到条件满足</span></span>
<span class="line"><span class="token comment"># 使用 while 循环遍历列表，直到满足特定条件</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">index <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;9. 找到数字 3，退出循环&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;9. 当前数字:&quot;</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    index <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 输出: 当前数字: 1, 当前数字: 2, 找到数字 3，退出循环</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 10. 模拟 do-while 循环</span></span>
<span class="line"><span class="token comment"># Python 没有 do-while 循环，但可以通过 while 循环模拟</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;10. 当前计数:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">    count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> count <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span>  <span class="token comment"># 输出: 当前计数: 0, 1, 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;函数说明&quot;&quot;&quot;</span></span>
<span class="line">    function_content</span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用"><span>函数调用</span></a></h3><div class="language-pyth line-numbers-mode" data-highlighter="prismjs" data-ext="pyth"><pre><code><span class="line">def print_num(a):</span>
<span class="line">    print(f&quot;入参数字是：{a}&quot;)</span>
<span class="line"></span>
<span class="line"># 函数调用</span>
<span class="line">print_num(10)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h3><p>重点要区分可变对象：<code>string, tuple, number</code>和不可变对象：<code>list, dict</code>。</p><ul><li>不可变对象：<code>string, tuple, number</code>，传递的是对象的副本，函数内部对参数的修改不会影响原始对象。</li><li>可变对象：<code>list, dict</code>，传递的是对象的引用，函数内部对参数的修改会影响原始对象。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">modify_number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 传递的是 x 的副本，函数内部对 num 的修改不会影响外部的 x。</span></span>
<span class="line">    num <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数内部:&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 函数内部: 15</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">modify_number<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数外部:&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 函数外部: 5</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">modify_list</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 传递的是 my_list 的引用。函数内部对 lst 的修改会直接影响外部的 my_list。</span></span>
<span class="line">    lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数内部:&quot;</span><span class="token punctuation">,</span> lst<span class="token punctuation">)</span>  <span class="token comment"># 函数内部: [1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">modify_list<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数外部:&quot;</span><span class="token punctuation">,</span> my_list<span class="token punctuation">)</span>  <span class="token comment"># 函数外部: [1, 2, 3, 4]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数类型" tabindex="-1"><a class="header-anchor" href="#参数类型"><span>参数类型</span></a></h3><ol><li><strong>必备参数</strong>：按顺序传递，数量必须匹配。</li><li><strong>关键字参数</strong>：通过 <code>参数名=值</code> 传递，顺序可任意。</li><li><strong>默认参数</strong>：定义时指定默认值，调用时可省略。</li><li><strong>可变长度参数</strong>：<code>*args</code> 接收任意位置参数，<code>**kwargs</code> 接收任意关键字参数。</li><li><strong>仅关键字参数</strong>：在 <code>*</code> 或 <code>*args</code> 后，必须通过关键字传递。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 必备参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;必备参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 必备参数: a=1, b=2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;关键字参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func2<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 关键字参数: a=1, b=2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 默认参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;默认参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 默认参数: a=1, b=10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 可变长度参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;可变长度参数: args=</span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">, kwargs=</span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment"># 输出: 可变长度参数: args=(1, 2, 3), kwargs={&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 20}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 仅关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func5</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;仅关键字参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func5<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 仅关键字参数: a=1, b=2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><p>使用 lambda 来创建匿名函数。适合简单、临时的操作。语法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">lambda</span> 参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> 表达式</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 示例</span></span>
<span class="line">add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># ==================== 文件的基本操作 ====================</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 1. 打开文件</span></span>
<span class="line"><span class="token comment"># 使用 open() 函数打开文件，模式可以是 &#39;r&#39;（读取）、&#39;w&#39;（写入）、&#39;a&#39;（追加）等</span></span>
<span class="line"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 以只读模式打开文件</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1. 文件已打开:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 读取文件内容</span></span>
<span class="line"><span class="token comment"># 使用 read() 方法读取文件的全部内容</span></span>
<span class="line">content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;2. 文件内容如下:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 关闭文件</span></span>
<span class="line"><span class="token comment"># 使用 close() 方法关闭文件</span></span>
<span class="line"><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;3. 文件已关闭&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 使用 with 语句自动管理文件</span></span>
<span class="line"><span class="token comment"># with 语句会在代码块执行完毕后自动关闭文件</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;4. 使用 with 语句读取文件内容:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 逐行读取文件</span></span>
<span class="line"><span class="token comment"># 使用 readline() 方法逐行读取文件</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;5. 逐行读取文件:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    line <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">while</span> line<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 去除每行的换行符</span></span>
<span class="line">        line <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 6. 读取所有行到列表</span></span>
<span class="line"><span class="token comment"># 使用 readlines() 方法将文件的所有行读取到一个列表中</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    lines <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;6. 文件的所有行:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 7. 写入文件</span></span>
<span class="line"><span class="token comment"># 使用 &#39;w&#39; 模式打开文件并写入内容（会覆盖文件原有内容）</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;7. 这是写入的第一行内容。\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;7. 这是写入的第二行内容。\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;7. 内容已写入 output.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 8. 追加内容到文件</span></span>
<span class="line"><span class="token comment"># 使用 &#39;a&#39; 模式打开文件并追加内容</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;8. 这是追加的内容。\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;8. 内容已追加到 output.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 9. 检查文件是否存在</span></span>
<span class="line"><span class="token comment"># 使用 os.path.exists() 检查文件是否存在</span></span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;9. 文件 example.txt 存在&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;9. 文件 example.txt 不存在&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 10. 删除文件</span></span>
<span class="line"><span class="token comment"># 使用 os.remove() 删除文件</span></span>
<span class="line"><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;10. 文件 output.txt 已删除&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;10. 文件 output.txt 不存在&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># ==================== 文件的高级操作 ====================</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 11. 读取和写入二进制文件</span></span>
<span class="line"><span class="token comment"># 使用 &#39;rb&#39; 和 &#39;wb&#39; 模式处理二进制文件</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;binary_file.bin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&quot;11. 这是二进制数据。\\n&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 写入二进制数据</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;binary_file.bin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;11. 读取二进制文件内容:&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 12. 使用 seek() 移动文件指针</span></span>
<span class="line"><span class="token comment"># seek() 用于移动文件指针到指定位置</span></span>
<span class="line"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">file</span><span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 将文件指针移动到第 10 个字节</span></span>
<span class="line">    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;12. 从第 10 个字节开始读取文件内容:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 13. 获取文件大小</span></span>
<span class="line"><span class="token comment"># 使用 os.path.getsize() 获取文件大小（字节数）</span></span>
<span class="line">file_size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;13. 文件 example.txt 的大小:&quot;</span><span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> <span class="token string">&quot;字节&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 14. 遍历目录中的文件</span></span>
<span class="line"><span class="token comment"># 使用 os.listdir() 获取目录中的所有文件</span></span>
<span class="line">directory <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;14. 目录中的文件:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> file_name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 15. 复制文件</span></span>
<span class="line"><span class="token comment"># 使用 shutil.copy() 复制文件</span></span>
<span class="line"><span class="token keyword">import</span> shutil</span>
<span class="line">shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;example_copy.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;15. 文件 example.txt 已复制为 example_copy.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 16. 移动文件</span></span>
<span class="line"><span class="token comment"># 使用 shutil.move() 移动文件</span></span>
<span class="line">shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">&quot;example_copy.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;backup/example_copy.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;16. 文件 example_copy.txt 已移动到 backup 目录&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 17. 创建目录</span></span>
<span class="line"><span class="token comment"># 使用 os.mkdir() 创建目录</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&quot;new_directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&quot;new_directory&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;17. 目录 new_directory 已创建&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 18. 删除目录</span></span>
<span class="line"><span class="token comment"># 使用 os.rmdir() 删除空目录</span></span>
<span class="line"><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&quot;new_directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">&quot;new_directory&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;18. 目录 new_directory 已删除&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75)]))}const i=s(e,[["render",l],["__file","python_basics.html.vue"]]),u=JSON.parse('{"path":"/Python/python_basics.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python 简介","slug":"python-简介","link":"#python-简介","children":[]},{"level":2,"title":"Windows 下安装 Python","slug":"windows-下安装-python","link":"#windows-下安装-python","children":[]},{"level":2,"title":"解释器","slug":"解释器","link":"#解释器","children":[]},{"level":2,"title":"基础语法","slug":"基础语法","link":"#基础语法","children":[{"level":3,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":3,"title":"行和缩进","slug":"行和缩进","link":"#行和缩进","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"数字","slug":"数字","link":"#数字","children":[]},{"level":3,"title":"列表","slug":"列表","link":"#列表","children":[]},{"level":3,"title":"元组","slug":"元组","link":"#元组","children":[]},{"level":3,"title":"字典","slug":"字典","link":"#字典","children":[]}]},{"level":2,"title":"条件","slug":"条件","link":"#条件","children":[]},{"level":2,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":2,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"定义函数","slug":"定义函数","link":"#定义函数","children":[]},{"level":3,"title":"函数调用","slug":"函数调用","link":"#函数调用","children":[]},{"level":3,"title":"参数传递","slug":"参数传递","link":"#参数传递","children":[]},{"level":3,"title":"参数类型","slug":"参数类型","link":"#参数类型","children":[]},{"level":3,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]}]},{"level":2,"title":"文件","slug":"文件","link":"#文件","children":[]}],"git":{"updatedTime":1742474920000,"contributors":[{"name":"HuangJX","username":"HuangJX","email":"hjxlog@gmail.com","commits":6,"url":"https://github.com/HuangJX"}],"changelog":[{"hash":"dfcadb09c48901c437c9083d74a35c233d93f550","time":1742474920000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"d7ecf6fdce721e5273c79d7218ca9f8a76e87f38","time":1742357822000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"abdbd676f5d7cb304a5b359ede841ee9d4fc8a9e","time":1742302299000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"336b13d3707fa7ee466f18820bf0b51b69f623c7","time":1742189185000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"0d94334b6f6f23439e05d830bcaa4516c42d4bc0","time":1742110479000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"ebc1f0c6d0703aa11bcc9360ae54ce42de028752","time":1742093790000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"}]},"filePathRelative":"Python/python_basics.md"}');export{i as comp,u as data};
