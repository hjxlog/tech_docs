import{_ as s,c as a,a as p,o as e}from"./app-DhLXB3hW.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>版本：python3，注意，python3并没有考虑向下兼容。</p><p>查看python版本：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">python <span class="token operator">-</span><span class="token operator">-</span>version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> param3<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;函数说明&quot;&quot;&quot;</span></span>
<span class="line">    function_content</span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用"><span>函数调用</span></a></h3><div class="language-pyth line-numbers-mode" data-highlighter="prismjs" data-ext="pyth"><pre><code><span class="line">def print_num(a):</span>
<span class="line">    print(f&quot;入参数字是：{a}&quot;)</span>
<span class="line"></span>
<span class="line"># 函数调用</span>
<span class="line">print_num(10)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h3><p>重点要区分可变对象：<code>string, tuple, number</code>和不可变对象：<code>list, dict</code>。</p><ul><li>不可变对象：<code>string, tuple, number</code>，传递的是对象的副本，函数内部对参数的修改不会影响原始对象。</li><li>可变对象：<code>list, dict</code>，传递的是对象的引用，函数内部对参数的修改会影响原始对象。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">modify_number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 传递的是 x 的副本，函数内部对 num 的修改不会影响外部的 x。</span></span>
<span class="line">    num <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数内部:&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 函数内部: 15</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">modify_number<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数外部:&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>  <span class="token comment"># 函数外部: 5</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">modify_list</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 传递的是 my_list 的引用。函数内部对 lst 的修改会直接影响外部的 my_list。</span></span>
<span class="line">    lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数内部:&quot;</span><span class="token punctuation">,</span> lst<span class="token punctuation">)</span>  <span class="token comment"># 函数内部: [1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">modify_list<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数外部:&quot;</span><span class="token punctuation">,</span> my_list<span class="token punctuation">)</span>  <span class="token comment"># 函数外部: [1, 2, 3, 4]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数类型" tabindex="-1"><a class="header-anchor" href="#参数类型"><span>参数类型</span></a></h3><ol><li><strong>必备参数</strong>：按顺序传递，数量必须匹配。</li><li><strong>关键字参数</strong>：通过 <code>参数名=值</code> 传递，顺序可任意。</li><li><strong>默认参数</strong>：定义时指定默认值，调用时可省略。</li><li><strong>可变长度参数</strong>：<code>*args</code> 接收任意位置参数，<code>**kwargs</code> 接收任意关键字参数。</li><li><strong>仅关键字参数</strong>：在 <code>*</code> 或 <code>*args</code> 后，必须通过关键字传递。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 1. 必备参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;必备参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 必备参数: a=1, b=2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;关键字参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func2<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 关键字参数: a=1, b=2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 默认参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;默认参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 默认参数: a=1, b=10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 可变长度参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;可变长度参数: args=</span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">, kwargs=</span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment"># 输出: 可变长度参数: args=(1, 2, 3), kwargs={&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 20}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 仅关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">func5</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;仅关键字参数: a=</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">func5<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 仅关键字参数: a=1, b=2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><p>使用 lambda 来创建匿名函数。适合简单、临时的操作。语法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">lambda</span> 参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> 表达式</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 示例</span></span>
<span class="line">add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)]))}const o=s(t,[["render",l],["__file","python_basics.html.vue"]]),u=JSON.parse('{"path":"/Python/python_basics.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"定义函数","slug":"定义函数","link":"#定义函数","children":[]},{"level":3,"title":"函数调用","slug":"函数调用","link":"#函数调用","children":[]},{"level":3,"title":"参数传递","slug":"参数传递","link":"#参数传递","children":[]},{"level":3,"title":"参数类型","slug":"参数类型","link":"#参数类型","children":[]},{"level":3,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]}]}],"git":{"updatedTime":1742110479000,"contributors":[{"name":"HuangJX","username":"HuangJX","email":"hjxlog@gmail.com","commits":2,"url":"https://github.com/HuangJX"}],"changelog":[{"hash":"0d94334b6f6f23439e05d830bcaa4516c42d4bc0","time":1742110479000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"},{"hash":"ebc1f0c6d0703aa11bcc9360ae54ce42de028752","time":1742093790000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"}]},"filePathRelative":"Python/python_basics.md"}');export{o as comp,u as data};
