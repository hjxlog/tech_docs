import{_ as s,c as a,a as e,o as t}from"./app-KBoto0Ig.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h2 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程"><span>网络编程</span></a></h2><h3 id="socket-的概念" tabindex="-1"><a class="header-anchor" href="#socket-的概念"><span>Socket 的概念</span></a></h3><p>Python提供了几个模块来处理网络编程，最常用的是<code>socket</code>模块。</p><p><strong>Socket（套接字）</strong> 是网络编程的核心概念，它是应用程序与网络协议之间的接口，用于实现不同主机之间的通信。简单来说，Socket 是网络通信的“端点”，它允许程序通过网络发送和接收数据。</p><ul><li><strong>Socket 是通信的端点</strong>：它由 IP 地址和端口号组成，用于标识网络中的一台设备和一个具体的服务。</li><li><strong>Socket 是双向的</strong>：可以通过 Socket 发送和接收数据。</li><li><strong>Socket 是抽象的</strong>：它隐藏了底层网络协议的复杂性，提供了一套简单的 API 供开发者使用。</li></ul><h3 id="socket-的工作流程" tabindex="-1"><a class="header-anchor" href="#socket-的工作流程"><span>Socket 的工作流程</span></a></h3><p>Socket 通信通常分为客户端和服务器端，其工作流程如下：</p><h4 id="服务器端" tabindex="-1"><a class="header-anchor" href="#服务器端"><span>服务器端</span></a></h4><ol><li>创建 Socket。</li><li>绑定 Socket 到一个 IP 地址和端口。</li><li>监听连接请求。</li><li>接受客户端连接。</li><li>与客户端通信（发送和接收数据）。</li><li>关闭连接。</li></ol><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h4><ol><li>创建 Socket。</li><li>连接到服务器的 IP 地址和端口。</li><li>与服务器通信（发送和接收数据）。</li><li>关闭连接。</li></ol><h3 id="socket-的类型" tabindex="-1"><a class="header-anchor" href="#socket-的类型"><span>Socket 的类型</span></a></h3><p>Socket 主要分为两种类型，分别对应两种网络协议：</p><h4 id="流式-socket-tcp-socket" tabindex="-1"><a class="header-anchor" href="#流式-socket-tcp-socket"><span>流式 Socket（TCP Socket）</span></a></h4><ul><li>基于 TCP 协议，提供可靠的、面向连接的通信。</li><li>数据以字节流的形式传输，保证数据顺序和完整性。</li><li>适合需要可靠传输的场景，如文件传输、网页浏览。</li></ul><h4 id="数据报-socket-udp-socket" tabindex="-1"><a class="header-anchor" href="#数据报-socket-udp-socket"><span>数据报 Socket（UDP Socket）</span></a></h4><ul><li>基于 UDP 协议，提供无连接的通信。</li><li>数据以数据报的形式传输，不保证可靠性和顺序。</li><li>适合需要快速传输的场景，如视频流、在线游戏。</li></ul><h3 id="socket-的简单示例" tabindex="-1"><a class="header-anchor" href="#socket-的简单示例"><span>Socket 的简单示例</span></a></h3><p>以下是一个 TCP Socket 的简单示例：</p><h4 id="服务器端代码" tabindex="-1"><a class="header-anchor" href="#服务器端代码"><span><strong>服务器端代码</strong></span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> socket</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建 Socket</span></span>
<span class="line">server_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 绑定 IP 和端口</span></span>
<span class="line">server_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span></span>
<span class="line">server_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>server_address<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 监听连接</span></span>
<span class="line">server_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待客户端连接...&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 接受连接</span></span>
<span class="line">connection<span class="token punctuation">,</span> client_address <span class="token operator">=</span> server_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;连接来自: </span><span class="token interpolation"><span class="token punctuation">{</span>client_address<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 接收数据</span></span>
<span class="line">data <span class="token operator">=</span> connection<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;收到数据: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 发送数据</span></span>
<span class="line">connection<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b&quot;Hello, Client!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 关闭连接</span></span>
<span class="line">connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端代码" tabindex="-1"><a class="header-anchor" href="#客户端代码"><span><strong>客户端代码</strong></span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> socket</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建 Socket</span></span>
<span class="line">client_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 连接服务器</span></span>
<span class="line">server_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span></span>
<span class="line">client_socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server_address<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 发送数据</span></span>
<span class="line">client_socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b&quot;Hello, Server!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 接收数据</span></span>
<span class="line">data <span class="token operator">=</span> client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;收到数据: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 关闭连接</span></span>
<span class="line">client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="socket-的应用场景" tabindex="-1"><a class="header-anchor" href="#socket-的应用场景"><span><strong>Socket 的应用场景</strong></span></a></h3><ul><li><strong>客户端-服务器模型</strong>：如网页服务器、聊天应用。</li><li><strong>实时通信</strong>：如视频通话、在线游戏。</li><li><strong>文件传输</strong>：如 FTP 服务器。</li><li><strong>分布式系统</strong>：如集群节点之间的通信。</li></ul>`,25)]))}const o=s(p,[["render",l],["__file","python_advanced.html.vue"]]),u=JSON.parse('{"path":"/Python/python_advanced.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"网络编程","slug":"网络编程","link":"#网络编程","children":[{"level":3,"title":"Socket 的概念","slug":"socket-的概念","link":"#socket-的概念","children":[]},{"level":3,"title":"Socket 的工作流程","slug":"socket-的工作流程","link":"#socket-的工作流程","children":[]},{"level":3,"title":"Socket 的类型","slug":"socket-的类型","link":"#socket-的类型","children":[]},{"level":3,"title":"Socket 的简单示例","slug":"socket-的简单示例","link":"#socket-的简单示例","children":[]},{"level":3,"title":"Socket 的应用场景","slug":"socket-的应用场景","link":"#socket-的应用场景","children":[]}]}],"git":{"updatedTime":1742174768000,"contributors":[{"name":"HuangJX","username":"HuangJX","email":"hjxlog@gmail.com","commits":1,"url":"https://github.com/HuangJX"}],"changelog":[{"hash":"f1ee4efd052e0cd8a9129c9f7b8db9676d38d2e8","time":1742174768000,"email":"hjxlog@gmail.com","author":"HuangJX","message":"UPDATE"}]},"filePathRelative":"Python/python_advanced.md"}');export{o as comp,u as data};
